
/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;

%%

%{

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */
    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }
    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }

   private int comment_count = 0;
%}

%init{

/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */

    // empty for now
%init}

%eofval{

/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */

    switch(yy_lexical_state) {
    case YYINITIAL:
	break;

     case LINE_COMMENT:
        yybegin(YYINITIAL);
        return new Symbol(TokenConstants.ERROR, "EOF in comment");

    case COMMENT:
        yybegin(YYINITIAL);
        return new Symbol(TokenConstants.ERROR, "EOF in comment");

    case STRING:
        yybegin(YYINITIAL);
        return new Symbol(TokenConstants.ERROR, "EOF in string constant");

	}
    return new Symbol(TokenConstants.EOF);
%eofval}

%class CoolLexer
%cup
%state COMMENT
%state STRING
%state LINE_COMMENT

TYPEID = [A-Z][A-Za-z0-9_]* /*should begin with capital letter*/
OBJECTID = [a-z_]+[\w]*     /*should contains only small letters*/
ws = [\f \r \v \t \n]+      /*for white spaces*/
digit =[0-9]*               /*should contains digits only*/
comment_begin = "(*"
comment_end = "*)"
%%

<YYINITIAL> ws           {   /*do nothing*/  } 
<YYINITIAL>"=>" {return new Symbol(TokenConstants.DARROW); }
<YYINITIAL> {digit}+ {return new Symbol(TokenConstants.INT_CONST), AbstractTable.inttable.addString(yytext())); } /*add it to int table*/
<YYINITIAL>"("  {return new Symbol (TokenConstants.LPAREN);}
<YYINITIAL>")"  {return new Symbol (TokenConstants.RPAREN);}
<YYINITIAL> [i] [f]  {return new Symbol (TokenConstants.IF);}
<YYINITIAL> [f][i] {return new Symbol (TokenConstants.FI);}
<YYINITIAL>"<"{ return new Symbol(TokenConstants.LT); }
<YYINITIAL>"/" { return new Symbol(TokenConstants.DIV); }
<YYINITIAL>"-"{ return new Symbol(TokenConstants.MINUS); }
<YYINITIAL>"*"{ return new Symbol(TokenConstants.MULT);}
<YYINITIAL>"+" { return new Symbol(TokenConstants.PLUS); }
<YYINITIAL>"," { return new Symbol(TokenConstants.COMMA); }
<YYINITIAL>[c] [l] [a] [s] [s]   {return new Symbol (TokenConstants.CLASS);}
<YYINITIAL> [t] [h] [e] [n]   {return new Symbol (TokenConstants.THEN);}
<YYINITIAL> [e] [l] [s] [e]  {return new Symbol (TokenConstants.ELSE);}
<YYINITIAL>[i] [n]   {return new Symbol (TokenConstants.IN);}
<YYINITIAL>{TYPEID}     { return new Symbol(TokenConstants.TYPEID,
                            AbstractTable.idtable.addString(yytext())); }
<YYINITIAL>{OBJECTID}   { return new Symbol(TokenConstants.OBJECTID,
                            AbstractTable.idtable.addString(yytext())); }
<YYINITIAL>"}"      { return new Symbol(TokenConstants.RBRACE); }
<YYINITIAL>"{"      { return new Symbol(TokenConstants.LBRACE); }
<YYINITIAL>";"      { return new Symbol(TokenConstants.SEMI); }
<YYINITIAL>":"      { return new Symbol(TokenConstants.COLON); }
<YYINITIAL>[l][e][t]{ return new Symbol(TokenConstants.LET); }
<YYINITIAL>[w][h][i][l][e]{ return new Symbol(TokenConstants.WHILE); }
<YYINITIAL>[i][n][h][e][r][i][t][s]{ return new Symbol(TokenConstants.INHERITS); }
<YYINITIAL>[p][o][o][l]{ return new Symbol(TokenConstants.POOL); }
<YYINITIAL>[l][o][o][p]{ return new Symbol(TokenConstants.LOOP); }
<YYINITIAL>"<-"     { return new Symbol(TokenConstants.ASSIGN); }
<YYINITIAL>"="      { return new Symbol(TokenConstants.EQ); }
<YYINITIAL>"."      { return new Symbol(TokenConstants.DOT); }

<YYINITIAL>\"           { string_buf.setLength(0); yybegin(STRING); }
<YYINITIAL>\n           { curr_lineno += 1; } /*move to new line*/
<STRING>\"              { yybegin(YYINITIAL);   
                          String str = string_buf.toString();
                          if(str.length() >= MAX_STR_CONST) {  /*if the string was exceed 1025 characters*/
                              return new Symbol(TokenConstants.ERROR, "String constant too long"); 
                          }
                          return new Symbol(TokenConstants.STR_CONST, AbstractTable.stringtable.addString(str)); /*add a string to string table*/
                        }
<STRING>\n              { yybegin(YYINITIAL); curr_lineno += 1;  /*string contains an unescaped newline*/
                          return new Symbol(TokenConstants.ERROR, "Unterminated string constant"); }

<YYINITIAL> {comment_begin }    { yybegin(COMMENT); comment_count += 1; } 
<COMMENT> {comment_begin}           { comment_count += 1; }
<COMMENT> {comment_end}           { comment_count -= 1; 
                          if(comment_count==0) { yybegin(YYINITIAL); } /*if comment_count = 0 that mean the comment has been finished */
                           }
<YYINITIAL>"--"         { yybegin(LINE_COMMENT); }
<LINE_COMMENT>\n        { yybegin(YYINITIAL); curr_lineno += 1;}/* comment "--" contains an unescaped newline*/

 .                          { /* This rule should be the very last
                                     in your lexical specification and
                                     will match match everything not
                                     matched by other lexical rules. */
                                  System.err.println("LEXER BUG - UNMATCHED: " + yytext()); }



